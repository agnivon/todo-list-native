{"version":3,"sources":["components/FlexContainer.js","components/Container.js","actions/index.js","components/TaskInput.js","components/TaskList.js","components/TasksCompleted.js","reducers/index.js","store.js","App.js","index.js"],"names":["styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","padding","FlexContainer","children","View","style","Container","space","marginVertical","actionTypes","deleteTask","id","type","payload","input","height","borderWidth","fontSize","flexGrow","button","TaskInput","dispatch","useDispatch","useState","setInput","TextInput","placeholder","value","onChangeText","Button","title","onPress","Keyboard","dismiss","Item","text","isDone","onSwipeRight","onSwipeLeft","Pressable","toggleTaskDone","taskListItem","Text","taskListItemDescription","renderItem","item","index","description","textAlign","paddingHorizontal","paddingVertical","TaskList","tasks","useSelector","state","FlatList","data","keyExtractor","scrollEnabled","TasksCompleted","tasksDone","reduce","acc","task","totalTasks","length","initialState","taskCount","store","createStore","action","filter","map","h1","fontWeight","marginTop","marginBottom","registerRootComponent","StatusBar"],"mappings":"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","file":"static/js/app.4d6fc64e.chunk.js","sourcesContent":["import { StyleSheet, View } from 'react-native';\n\nconst FlexContainer = ({children}) => {\n    return (\n        <View style={styles.container}>{children}</View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'stretch',\n        justifyContent: 'flex-start',\n        padding: 15\n    },\n});\n\nexport default FlexContainer;","import { StyleSheet, View } from \"react-native\";\n\nconst Container = ({space=10, children}) => {\n    return(\n        <View style={[styles.container, { marginVertical: space}]}>\n            {children}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#fff',\n    },\n});\n\nexport default Container;","export const actionTypes = {\n    ADD_NEW_TASK: 'todo/taskAdded',\n    DELETE_TASK: 'todo/taskDeleted',\n    TOGGLE_TASK_DONE: 'todo/taskToggled'\n}\n\nexport const addNewTask = (taskDescription) => {\n    return {\n        type: actionTypes.ADD_NEW_TASK,\n        payload: taskDescription\n    }\n}\n\nexport const deleteTask = (id) => {\n    return {\n        type: actionTypes.DELETE_TASK,\n        payload: id\n    }\n}\n\nexport const toggleTaskDone = (id) => {\n    return {\n        type: actionTypes.TOGGLE_TASK_DONE,\n        payload: id\n    }\n}","import { StyleSheet, TextInput, Button, View, Keyboard } from 'react-native';\n\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNewTask } from '../actions';\n\nimport Container from './Container';\n\nconst TaskInput = () => {\n\n    const dispatch = useDispatch();\n    const [input, setInput] = useState('');\n\n    return (\n        <Container space={0}>\n            <TextInput\n                style={styles.input}\n                placeholder=\"Enter new task\"\n                value={input}\n                onChangeText={setInput}\n            />\n            <Button title=\"Add Task\" style={styles.button}\n                onPress={() => {\n                    if (input) {\n                        dispatch(addNewTask(input));\n                        setInput('');\n                        Keyboard.dismiss();\n                    }\n                }} />\n        </Container>\n    );\n}\n\nconst styles = StyleSheet.create({\n    input: {\n        height: 60,\n        borderWidth: 1,\n        padding: 10,\n        fontSize: 20,\n        flexGrow: 2,\n        marginVertical: 10\n    },\n    button: {\n        flexGrow: 1,\n        marginVertical: 10\n    }\n});\n\nexport default TaskInput;","import { View, FlatList, Text, StyleSheet, Pressable } from 'react-native';\n/* import { Swipeable } from 'react-native-gesture-handler'; */\nimport GestureRecognizer from 'react-native-swipe-gestures';\n\nimport Container from './Container';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleTaskDone, deleteTask } from '../actions';\n\n/* const DATA = [\n\n    {\n        id: 1,\n        description: 'Task 1',\n        isDone: false\n    },\n    {\n        id: 2,\n        description: 'Task 2',\n        isDone: false\n    },\n    {\n        id: 3,\n        description: 'Task 3',\n        isDone: true\n    }\n] */\n\n/* const SwipeDelete = () => {\n    return (\n        <View\n            style={styles.swipeDeleteView}\n        >\n            <Text\n                style={styles.swipeDeleteText}\n            >\n                Delete\n            </Text>\n        </View>\n    );\n} */\n\nconst Item = ({ text, id, isDone }) => {\n    const dispatch = useDispatch();\n    return (\n        <GestureRecognizer\n        onSwipeRight={() => dispatch(deleteTask(id))}\n        onSwipeLeft={() => dispatch(deleteTask(id))}>\n            <Pressable onPress={() => dispatch(toggleTaskDone(id))}>\n                <View style={[styles.taskListItem, { backgroundColor: isDone ? 'lightgreen' : 'lightgray' }]}>\n                    <Text style={styles.taskListItemDescription}>{text}</Text>\n                </View>\n            </Pressable>\n        </GestureRecognizer>\n    );\n}\n\nconst renderItem = ({ item, index }) => {\n    return (<Item text={index + 1 + '. ' + item.description} id={item.id} isDone={item.isDone}\n        key={item.id} />);\n}\n\nconst TaskList = () => {\n\n    const tasks = useSelector(state => state.tasks);\n\n    return (\n        <View style={{ flex: 1 }}>\n            <FlatList data={tasks}\n                renderItem={renderItem}\n                keyExtractor={(item) => item.id}\n                scrollEnabled={true}\n            /* contentContainerStyle ={{\n                flexGrow: 1\n            }} */\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    taskListItem: {\n        marginVertical: 10,\n        /* height: 60 */\n    },\n    taskListItemDescription: {\n        fontSize: 20,\n        textAlign: 'left',\n        paddingHorizontal: 10,\n        paddingVertical: 10,\n    },\n    /* swipeDeleteView: {\n        backgroundColor: '#ff8303',\n        height: 60,\n        marginVertical: 10,\n    },\n    swipeDeleteText: {\n        color: '#1b1a17',\n        paddingHorizontal: 10,\n        fontWeight: '600',\n        paddingHorizontal: 30,\n        paddingVertical: 20,\n    } */\n});\n\nexport default TaskList;","import { View, Text, StyleSheet } from 'react-native';\nimport { useSelector } from 'react-redux';\n\nconst TasksCompleted = () => {\n\n    const tasks = useSelector(state => state.tasks);\n\n    const tasksDone = tasks.reduce((acc, task) => task.isDone ? acc + 1 : acc, 0);\n    const totalTasks = tasks.length;\n\n\n    return (\n        <View style={{ marginVertical: 10 }}>\n            <Text>{tasksDone}{'/'}{totalTasks} tasks completed</Text>\n        </View>\n    )\n}\n\nexport default TasksCompleted;","import { actionTypes } from \"../actions\"\n\nconst initialState = {\n    tasks: [],\n    taskCount: 0\n}\n\nexport const rootReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_NEW_TASK:\n            return {\n                ...state,\n                tasks: [...state.tasks, {\n                    id: state.taskCount + 1,\n                    description: action.payload,\n                    isDone: false\n                }],\n                taskCount: state.taskCount + 1\n            }\n        \n        case actionTypes.DELETE_TASK:\n            return {\n                ...state,\n                tasks: state.tasks.filter(task => !(task.id === action.payload)),\n                taskCount: state.taskCount\n            }\n\n        case actionTypes.TOGGLE_TASK_DONE:\n            return {\n                ...state,\n                tasks: state.tasks.map(task => {\n                    if (task.id === action.payload) \n                        return {\n                            ...task,\n                            isDone: !task.isDone\n                        }\n                    else\n                        return task\n                })\n            }\n\n        default: return state\n    }\n}","import { createStore } from 'redux';\n\nimport { rootReducer } from './reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport FlexContainer from './components/FlexContainer';\nimport Container from './components/Container';\n// import Separator from './components/Separator';\nimport TaskInput from './components/TaskInput';\nimport TaskList from './components/TaskList';\nimport TasksCompleted from './components/TasksCompleted';\n\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <FlexContainer>\n        <Container space={0}>\n          <Text style={styles.h1}>Todo List</Text>\n        </Container>\n        <TasksCompleted />\n        <TaskList />\n        <TaskInput />\n        <StatusBar style=\"auto\" />\n      </FlexContainer>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  h1: {\n    fontSize: 30,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10\n  }\n});\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}